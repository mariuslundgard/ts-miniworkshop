/* generated by Buddy */
if ('undefined' === typeof self) var self = this;
if ('undefined' === typeof global) var global = self;
if ('undefined' === typeof process) var process = {env:{}};
if (self._m_ == null) self._m_ = {};
if (self.require == null) {
  self.require = function require (id) {
    if (_m_[id]) return (_m_[id].boot) ? _m_[id]() : _m_[id];

    if (process.env.NODE_ENV == 'development') {
      console.warn('module ' + id + ' not found');
    }
  };
}
_m_['ts/slideshow.ts']=(function(module,exports){
  module=this;exports=module.exports;

  "use strict";
  function slideshow(rootElement, initialState) {
      if (initialState === void 0) { initialState = {}; }
      var elements;
      var slides;
      var activeSlideIndex;
      var activeSlideElement;
      function prev() {
          activeSlideIndex = activeSlideIndex === 0 ? slides.length - 1 : activeSlideIndex - 1;
          update();
      }
      function next() {
          activeSlideIndex = (activeSlideIndex + 1) % slides.length;
          update();
      }
      function update() {
          var activeSlide = slides[activeSlideIndex];
          var size = slides.length;
          if (!size) {
              elements.status.innerHTML = '';
              return;
          }
          deactivateElement(activeSlideElement);
          activeSlideElement = elements.slideContainer.childNodes[activeSlideIndex];
          activateElement(activeSlideElement);
          elements.status.innerHTML = (activeSlideIndex + 1) + " av " + size + ": " + activeSlide.caption;
      }
      function handleKeydown(evt) {
          switch (evt.key) {
              case 'ArrowLeft':
                  evt.preventDefault();
                  return prev();
              case 'ArrowRight':
                  evt.preventDefault();
                  return next();
              case ' ':
                  evt.preventDefault();
                  return evt.shiftKey ? prev() : next();
              default: return null;
          }
      }
      function mount() {
          slides = initialState.slides || [];
          activeSlideIndex = initialState.activeIndex || 0;
          activeSlideElement = null;
          elements = {
              slideContainer: rootElement.querySelector('.slideshow__slideContainer'),
              status: rootElement.querySelector('.slideshow__status'),
              prevButton: rootElement.querySelector('.slideshow__prevButton'),
              nextButton: rootElement.querySelector('.slideshow__nextButton')
          };
          // Create and append each slide element to the container element
          slides.forEach(function (slide, idx) {
              var slideElement = createSlideElement(slide);
              if (idx === activeSlideIndex) {
                  activateElement(slideElement);
                  activeSlideElement = slideElement;
              }
              elements.slideContainer.appendChild(slideElement);
          });
          // Add event listeners
          elements.prevButton.addEventListener('click', prev);
          elements.nextButton.addEventListener('click', next);
          elements.slideContainer.addEventListener('click', next);
          window.addEventListener('keydown', handleKeydown);
          update();
      }
      function unmount() {
          // Remove event listeners
          elements.prevButton.removeEventListener('click', prev);
          elements.nextButton.removeEventListener('click', next);
          elements.slideContainer.removeEventListener('click', next);
          window.removeEventListener('keydown', handleKeydown);
          // Remove created slide elements
          while (elements.slideContainer.firstChild) {
              elements.slideContainer.removeChild(elements.slideContainer.firstChild);
          }
          // Remove status element content
          elements.status.innerHTML = '';
          // Garbage collection
          slides = null;
          activeSlideElement = null;
          activeSlideIndex = null;
          elements = null;
      }
      return { mount: mount, unmount: unmount };
  }
  function createSlideElement(data) {
      var slideElement = document.createElement('li');
      slideElement.setAttribute('role', 'img');
      slideElement.className = 'slideshow__slide';
      slideElement.innerHTML = "" + data.title;
      slideElement.style.color = "hsl(" + Math.random() * 360 + ", 100%, 70%)";
      return slideElement;
  }
  function activateElement(el) {
      setTimeout(function () {
          el.classList.add('is-active');
      }, 200);
  }
  function deactivateElement(el) {
      el.classList.remove('is-active');
  }
  exports.__esModule = true;
  exports["default"] = slideshow;
  

  return module.exports;
}).call({exports:{}});
_m_['ts/bootstrap.ts']=(function(module,exports){
  module=this;exports=module.exports;

  "use strict";
  var slideshow_1 = _m_['ts/slideshow.ts'];
  var slideshowElement = document.querySelector('#slideshow');
  var initialState = JSON.parse(document.querySelector('#initialState').innerHTML);
  // Mount slideshow
  slideshow_1["default"](slideshowElement, initialState)
      .mount();
  

  return module.exports;
}).call({exports:{}});